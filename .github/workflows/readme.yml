name: Push readme.md to Modrinth
on: [push]
jobs:
  Push-Readme:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source Tree
      uses: actions/checkout@v4

    - name: Push readme.md
      shell: pwsh
      env:
        MODRINTH_API_KEY: ${{ secrets.MODRINTH_API_KEY }}
      run: |
        # Load README content
        $Readme = Get-Content -Path .\README.md -Raw

        # Create JSON body
        $JsonBody = @{
            body = $Readme
        } | ConvertTo-Json -Depth 10

        # Modrinth API endpoint
        $ModrinthURL = "https://api.modrinth.com/v2/project/keepsomeinventory"

        # Create client and request
        $handler = [System.Net.Http.HttpClientHandler]::new()
        $client = [System.Net.Http.HttpClient]::new($handler)
        $patchMethod = [System.Net.Http.HttpMethod]::new("PATCH")
        $request = [System.Net.Http.HttpRequestMessage]::new($patchMethod, $ModrinthURL)

        # Add headers
        $authHeader = "Bearer $($env:MODRINTH_API_KEY)"
        $request.Headers.TryAddWithoutValidation("Authorization", $authHeader)
        $request.Headers.TryAddWithoutValidation("User-Agent", "thepwrtank18/keepsomeinventory/1.0 (pt18.relay@gmail.com)")

        # Add JSON content
        $request.Content = [System.Net.Http.StringContent]::new($JsonBody, [System.Text.Encoding]::UTF8, "application/json")

        # Send the request
        $response = $client.SendAsync($request).Result

        # Handle response
        if ($response.IsSuccessStatusCode -and $response.StatusCode -eq 200) {
            $content = $response.Content.ReadAsStringAsync().Result
            Write-Host "`n✅ Success: $($response.StatusCode)"
            Write-Output $content
        } else {
            $statusCode = [int]$response.StatusCode
            $errorMsg = $response.Content.ReadAsStringAsync().Result
            throw "`n❌ Request failed with status code $statusCode.`nResponse:`n$errorMsg"
        }
